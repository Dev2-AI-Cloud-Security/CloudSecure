name: Deploy CloudSecure to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        env:
          NODE_OPTIONS: --max-old-space-size=6144

      - name: Build React App
        run: |
          cd app
          echo "Node memory settings: $NODE_OPTIONS"
          free -m
          npm ci --loglevel=verbose  # Use package-lock.json for efficiency
          npm run build
          free -m
        env:
          NODE_OPTIONS: --max-old-space-size=6144

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -refresh=true

      - name: Get EC2 IP
        id: ec2-ip
        working-directory: ./terraform
        run: |
          IP=$(terraform output -raw instance_ip | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          if [ -z "$IP" ]; then
            echo "No running EC2 instance found. Exiting."
            exit 1
          fi
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Install SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /home/runner/key.pem
          chmod 400 /home/runner/key.pem

      - name: Wait for EC2 Instance
        run: |
          echo "Waiting for EC2 instance to be ready..."
          for i in {1..60}; do
            if nc -v -w 5 -z ${{ steps.ec2-ip.outputs.ip }} 22 2>&1; then
              echo "EC2 is ready!"
              break
            fi
            echo "Waiting... ($i/60)"
            sleep 10
          done
          if ! nc -w 5 -z ${{ steps.ec2-ip.outputs.ip }} 22; then
            echo "Error: EC2 not reachable after 10 minutes"
            exit 1
          fi

      - name: Deploy Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} << 'EOF'
            df -h /
            cat /home/ec2-user/resize.log || echo "No resize log found"
            sudo dnf update -y
            sudo dnf install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo groupadd docker || true
            sudo usermod -aG docker ec2-user

            echo "Waiting for Docker daemon..."
            for i in {1..30}; do
              if sudo docker info --format '{{.ServerVersion}}' > /dev/null 2>&1; then
                echo "Docker daemon is ready!"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 5
            done
            if ! sudo docker info --format '{{.ServerVersion}}' > /dev/null 2>&1; then
              echo "Error: Docker daemon not running after 2.5 minutes"
              exit 1
            fi

            sudo docker system prune -f --volumes || true
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            mkdir -p /home/ec2-user/cloudsecure
          EOF

          # Copy only the build folder and necessary files
          scp -i /home/runner/key.pem -r ./app/build ec2-user@${{ steps.ec2-ip.outputs.ip }}:/home/ec2-user/cloudsecure/build
          scp -i /home/runner/key.pem ./app/package.json ec2-user@${{ steps.ec2-ip.outputs.ip }}:/home/ec2-user/cloudsecure/
          scp -i /home/runner/key.pem ./app/server.js ec2-user@${{ steps.ec2-ip.outputs.ip }}:/home/ec2-user/cloudsecure/
          scp -i /home/runner/key.pem ./docker-compose.yml ec2-user@${{ steps.ec2-ip.outputs.ip }}:/home/ec2-user/cloudsecure/

          ssh -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} << 'EOF'
            cd /home/ec2-user/cloudsecure
            df -h /
            free -m
            sudo /usr/local/bin/docker-compose up -d --build || {
              echo "Docker Compose failed. Checking logs..."
              sudo docker ps -a
              df -h /
              free -m
              exit 1
            }
            echo "Docker Compose deployed successfully!"
            sudo docker ps -a
          EOF