name: Deploy CloudSecure to AWS EC2

on:
  push:
    branches:
      - cicd-v2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        env:
          NODE_OPTIONS: --max-old-space-size=6144

      - name: Build React App
        run: |
          set -e  # Exit on any error
          cd app/client
          echo "Node memory settings: $NODE_OPTIONS"
          free -m
          echo "Current directory: $(pwd)"
          echo "Directory contents before install:"
          ls -la
          if [ -f "package-lock.json" ]; then
            echo "Using npm ci..."
            npm ci --loglevel=verbose > npm-install.log 2>&1 || {
              echo "npm ci failed. See npm-install.log for details:"
              cat npm-install.log
              exit 1
            }
          else
            echo "No package-lock.json found, falling back to npm install..."
            npm install --loglevel=verbose > npm-install.log 2>&1 || {
              echo "npm install failed. See npm-install.log for details:"
              cat npm-install.log
              exit 1
            }
          fi
          echo "Directory contents after install:"
          ls -la
          echo "Running npm run build..."
          CI=false npm run build > build.log 2>&1 || {
            echo "npm run build failed. See build.log for details:"
            cat build.log
            exit 1
          }
          if [ ! -d "build" ]; then
            echo "Error: build directory not found after npm run build"
            ls -la
            exit 1
          fi
          echo "Build directory contents:"
          ls -la build
          free -m
        env:
          NODE_OPTIONS: --max-old-space-size=6144

      - name: Upload Build Logs
        if: always()  # Run even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            app/client/npm-install.log
            app/client/build.log

      - name: Install SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /home/runner/key.pem
          chmod 400 /home/runner/key.pem

      - name: Wait for EC2 Instance
        run: |
          echo "Waiting for EC2 instance to be ready..."
          for i in {1..60}; do
            if nc -v -w 5 -z 3.81.16.213 22 2>&1; then
              echo "EC2 is ready!"
              break
            fi
            echo "Waiting... ($i/60)"
            sleep 10
          done
          if ! nc -w 5 -z 3.81.16.213 22; then
            echo "Error: EC2 not reachable after 10 minutes"
            exit 1
          fi

      - name: Deploy Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@3.81.16.213 << 'EOF'
            df -h /
            cat /home/ec2-user/resize.log || echo "No resize log found"
            sudo dnf clean packages  # Clear package cache to avoid [Errno 2]
            sudo dnf update -y
            sudo dnf install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo groupadd docker || true
            sudo usermod -aG docker ec2-user

            echo "Waiting for Docker daemon..."
            for i in {1..30}; do
              if sudo docker info --format '{{.ServerVersion}}' > /dev/null 2>&1; then
                echo "Docker daemon is ready!"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 5
            done
            if ! sudo docker info --format '{{.ServerVersion}}' > /dev/null 2>&1; then
              echo "Error: Docker daemon not running after 2.5 minutes"
              exit 1
            fi

            sudo docker system prune -f --volumes || true
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "Docker Compose version: $(/usr/local/bin/docker-compose --version)"
            mkdir -p /home/ec2-user/cloudsecure
          EOF

          scp -i /home/runner/key.pem -r ./app/client/build ec2-user@3.81.16.213:/home/ec2-user/cloudsecure/app/client/build
          scp -i /home/runner/key.pem ./app/server/package.json ec2-user@3.81.16.213:/home/ec2-user/cloudsecure/app/server/
          scp -i /home/runner/key.pem ./app/server/server.js ec2-user@3.81.16.213:/home/ec2-user/cloudsecure/app/server/
          scp -i /home/runner/key.pem ./app/server/Dockerfile ec2-user@3.81.16.213:/home/ec2-user/cloudsecure/app/server/
          scp -i /home/runner/key.pem ./docker-compose.yml ec2-user@3.81.16.213:/home/ec2-user/cloudsecure/

          ssh -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@3.81.16.213 << 'EOF'
            cd /home/ec2-user/cloudsecure
            df -h /
            free -m
            sudo /usr/local/bin/docker-compose up -d --build || {
              echo "Docker Compose failed. Checking logs..."
              sudo docker ps -a
              df -h /
              free -m
              exit 1
            }
            echo "Docker Compose deployed successfully!"
            sudo docker ps -a
          EOF