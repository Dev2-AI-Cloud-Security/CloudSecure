# name: Deploy CloudSecure to AWS EC2

# on:
#   push:
#     branches:
#       - fix-1
#     paths:
#       - 'app/client/**'
#       - 'app/server/**'
#       - 'docker-compose.yml'
#       - '.github/workflows/deploy.yml'

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout the repository
#       - name: Checkout code
#         uses: actions/checkout@v4

#       # Set up Terraform
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.9.0

#       # Configure AWS Credentials
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       # Initialize Terraform
#       - name: Terraform Init
#         working-directory: ./terraform
#         run: |
#           echo "Terraform version:"
#           terraform --version
#           terraform init || {
#             echo "Terraform init failed."
#             exit 1
#           }

#       # Debug: Display main.tf contents
#       - name: Debug main.tf Contents
#         working-directory: ./terraform
#         run: |
#           echo "Contents of main.tf:"
#           cat main.tf
#           if grep -q "volume_size.*=.*10" main.tf; then
#             echo "Confirmed volume_size = 10 in main.tf"
#           elif grep -q "volume_size.*=.*30" main.tf; then
#             echo "Confirmed volume_size = 30 in main.tf"
#           else
#             echo "Error: volume_size not found in main.tf"
#             exit 1
#           fi

#       # Terminate existing instances
#       - name: Terminate Existing Instances
#         working-directory: ./terraform
#         run: |
#           echo "Clearing Terraform state..."
#           rm -f terraform.tfstate terraform.tfstate.backup
#           echo "Destroying existing Terraform-managed resources..."
#           terraform destroy -auto-approve || {
#             echo "No resources to destroy or destroy failed. Continuing..."
#           }
#           echo "Ensuring clean state..."
#           terraform init -reconfigure

#       # Apply Terraform (create or update EC2)
#       - name: Terraform Apply
#         working-directory: ./terraform
#         run: |
#           terraform apply -auto-approve || {
#             echo "Terraform apply failed. Outputting logs..."
#             terraform output -raw instance_ip || echo "No instance IP output"
#             exit 1
#           }
#           IP=$(terraform output -raw instance_ip | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
#           if [ -z "$IP" ]; then
#             echo "No running EC2 instance found and none created. Exiting."
#             exit 1
#           fi
#           echo "EC2 IP: $IP"

#       # Get EC2 instance IP
#       - name: Get EC2 IP
#         id: ec2-ip
#         working-directory: ./terraform
#         run: |
#           IP=$(terraform output -raw instance_ip | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
#           if [ -z "$IP" ]; then
#             echo "No running EC2 instance found and none created. Exiting."
#             exit 1
#           fi
#           echo "ip=$IP" >> $GITHUB_OUTPUT

#       # Install and validate SSH key
#       - name: Install SSH Key
#         run: |
#           if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
#             echo "Error: EC2_SSH_KEY secret is not set"
#             exit 1
#           fi
#           echo "${{ secrets.EC2_SSH_KEY }}" > /home/runner/key.pem
#           chmod 400 /home/runner/key.pem
#           ssh-keygen -y -P "" -f /home/runner/key.pem > /home/runner/key.pub || {
#             echo "Error: Invalid SSH private key format"
#             exit 1
#           }
#           echo "SSH key validated successfully"

#       # Debug SSH Connection
#       - name: Debug SSH Connection
#         run: |
#           echo "Verifying SSH connection to ec2-user@${{ steps.ec2-ip.outputs.ip }}..."
#           for i in {1..15}; do
#             ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} "echo 'SSH successful'" && break
#             echo "Attempt $i failed. Retrying in 20 seconds..."
#             sleep 20
#           done || {
#             echo "SSH connection failed after 15 attempts."
#             ssh -v -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} "whoami" || true
#             exit 1
#           }

#       # Wait for EC2 to be ready
#       - name: Wait for EC2 Instance
#         run: |
#           echo "Waiting for EC2 instance to be ready..."
#           for i in {1..60}; do
#             if nc -v -w 5 -z ${{ steps.ec2-ip.outputs.ip }} 22 2>&1; then
#               echo "EC2 is ready!"
#               break
#             fi
#             echo "Waiting... ($i/60)"
#             sleep 10
#           done
#           if ! nc -w 5 -z ${{ steps.ec2-ip.outputs.ip }} 22; then
#             echo "Error: EC2 not reachable after 10 minutes"
#             exit 1
#           fi

#       # Deploy Docker Compose
#       - name: Deploy Docker Compose
#         run: |
#           echo "Creating cloudsecure directory on EC2 instance..."
#           ssh -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} << 'EOF'
#             mkdir -p /home/ec2-user/cloudsecure
#             chown ec2-user:ec2-user /home/ec2-user/cloudsecure
#             chmod 755 /home/ec2-user/cloudsecure
#           EOF
#           echo "Copying docker-compose.yml to EC2 instance..."
#           scp -o StrictHostKeyChecking=no -i /home/runner/key.pem docker-compose.yml ec2-user@${{ steps.ec2-ip.outputs.ip }}:/home/ec2-user/cloudsecure/ || {
#             echo "SCP failed."
#             exit 1
#           }
#           echo "Deploying Docker Compose..."
#           ssh -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} << 'EOF'
#             # Debug OS
#             cat /etc/os-release || echo "OS info unavailable"
#             echo "User: $(whoami)"
#             # Stop ECS agent
#             docker stop $(docker ps -q) || echo "No ECS agent to stop"
#             # Verify copied files
#             ls -la /home/ec2-user/cloudsecure
#             # Install Docker
#             sudo dnf update -y
#             sudo dnf install -y docker
#             sudo systemctl start docker
#             sudo systemctl enable docker
#             sudo usermod -aG docker ec2-user
#             newgrp docker || true
#             # Install Docker Compose
#             sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#             sudo chmod +x /usr/local/bin/docker-compose
#             echo "Docker Compose version: $(docker-compose --version)"
#             # Run Docker Compose
#             cd /home/ec2-user/cloudsecure
#             docker-compose down --remove-orphans
#             docker-compose pull
#             docker-compose up -d
#             # Verify containers
#             docker ps
#           EOF
#           echo "Front-end should be accessible at http://${{ steps.ec2-ip.outputs.ip }}"

name: Deploy CloudSecure to AWS EC2

on:
  push:
    branches:
      - fix-1
    paths:
      - 'app/client/**'
      - 'app/server/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform
        run: |
          echo "Terraform version:"
          terraform --version
          terraform init || {
            echo "Terraform init failed."
            exit 1
          }

      # Debug: Display main.tf contents
      - name: Debug main.tf Contents
        working-directory: ./terraform
        run: |
          echo "Contents of main.tf:"
          cat main.tf
          if grep -q "volume_size.*=.*10" main.tf; then
            echo "Confirmed volume_size = 10 in main.tf"
          elif grep -q "volume_size.*=.*30" main.tf; then
            echo "Confirmed volume_size = 30 in main.tf"
          else
            echo "Error: volume_size not found in main.tf"
            exit 1
          fi

      # Terminate existing instances
      - name: Terminate Existing Instances
        working-directory: ./terraform
        run: |
          echo "Clearing Terraform state..."
          rm -f terraform.tfstate terraform.tfstate.backup
          echo "Destroying existing Terraform-managed resources..."
          terraform destroy -auto-approve || {
            echo "No resources to destroy or destroy failed. Continuing..."
          }
          echo "Ensuring clean state..."
          terraform init -reconfigure

      # Apply Terraform (create or update EC2)
      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve || {
            echo "Terraform apply failed. Outputting logs..."
            terraform output -raw instance_ip || echo "No instance IP output"
            exit 1
          }
          IP=$(terraform output -raw instance_ip | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          if [ -z "$IP" ]; then
            echo "No running EC2 instance found and none created. Exiting."
            exit 1
          fi
          echo "EC2 IP: $IP"

      # Get EC2 instance IP
      - name: Get EC2 IP
        id: ec2-ip
        working-directory: ./terraform
        run: |
          IP=$(terraform output -raw instance_ip | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          if [ -z "$IP" ]; then
            echo "No running EC2 instance found and none created. Exiting."
            exit 1
          fi
          echo "ip=$IP" >> $GITHUB_OUTPUT

      # Install and validate SSH key
      - name: Install SSH Key
        run: |
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "Error: EC2_SSH_KEY secret is not set"
            exit 1
          fi
          echo "${{ secrets.EC2_SSH_KEY }}" > /home/runner/key.pem
          chmod 400 /home/runner/key.pem
          ssh-keygen -y -P "" -f /home/runner/key.pem > /home/runner/key.pub || {
            echo "Error: Invalid SSH private key format"
            exit 1
          }
          echo "SSH key validated successfully"

      # Debug SSH Connection
      - name: Debug SSH Connection
        run: |
          echo "Verifying SSH connection to ec2-user@${{ steps.ec2-ip.outputs.ip }}..."
          for i in {1..15}; do
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} "echo 'SSH successful'" && break
            echo "Attempt $i failed. Retrying in 20 seconds..."
            sleep 20
          done || {
            echo "SSH connection failed after 15 attempts."
            ssh -v -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} "whoami" || true
            exit 1
          }

      # Wait for EC2 to be ready
      - name: Wait for EC2 Instance
        run: |
          echo "Waiting for EC2 instance to be ready..."
          for i in {1..60}; do
            if nc -v -w 5 -z ${{ steps.ec2-ip.outputs.ip }} 22 2>&1; then
              echo "EC2 is ready!"
              break
            fi
            echo "Waiting... ($i/60)"
            sleep 10
          done
          if ! nc -w 5 -z ${{ steps.ec2-ip.outputs.ip }} 22; then
            echo "Error: EC2 not reachable after 10 minutes"
            exit 1
          fi

      # Deploy Docker Compose and Clean MongoDB
      - name: Deploy Docker Compose and Clean MongoDB
        run: |
          echo "Creating cloudsecure directory on EC2 instance..."
          ssh -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} << 'EOF'
            mkdir -p /home/ec2-user/cloudsecure
            chown ec2-user:ec2-user /home/ec2-user/cloudsecure
            chmod 755 /home/ec2-user/cloudsecure
          EOF
          echo "Copying docker-compose.yml to EC2 instance..."
          scp -o StrictHostKeyChecking=no -i /home/runner/key.pem docker-compose.yml ec2-user@${{ steps.ec2-ip.outputs.ip }}:/home/ec2-user/cloudsecure/ || {
            echo "SCP failed."
            exit 1
          }
          echo "Deploying Docker Compose and cleaning MongoDB..."
          ssh -o StrictHostKeyChecking=no -i /home/runner/key.pem ec2-user@${{ steps.ec2-ip.outputs.ip }} << 'EOF'
            # Debug OS
            cat /etc/os-release || echo "OS info unavailable"
            echo "User: $(whoami)"
            # Stop ECS agent
            docker stop $(docker ps -q) || echo "No ECS agent to stop"
            # Verify copied files
            ls -la /home/ec2-user/cloudsecure
            # Install Docker
            sudo dnf update -y
            sudo dnf install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
            newgrp docker || true
            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "Docker Compose version: $(docker-compose --version)"
            # Run Docker Compose
            cd /home/ec2-user/cloudsecure
            docker-compose down --remove-orphans
            docker-compose pull
            docker-compose up -d
            # Wait for MongoDB container to be ready
            echo "Waiting for mongo-service to be ready..."
            for i in {1..30}; do
              if docker exec mongo-service mongosh -u mongo-user -p mongo-password --eval "db" --quiet; then
                echo "MongoDB is ready!"
                break
              fi
              echo "Waiting for MongoDB... ($i/30)"
              sleep 10
            done
            if ! docker exec mongo-service mongosh -u mongo-user -p mongo-password --eval "db" --quiet; then
              echo "MongoDB not ready after 5 minutes"
              exit 1
            fi
            # Clean up documents with googleId: null
            echo "Cleaning up documents with googleId: null..."
            docker exec mongo-service mongosh -u mongo-user -p mongo-password cloudsecure --eval "db.users.deleteMany({ googleId: null })"
            # Verify containers
            docker ps
          EOF
          echo "Front-end should be accessible at http://${{ steps.ec2-ip.outputs.ip }}"